---
title: "Un petit coup de polish Nettoyage de fichiers Excel avec R"
subtitle: "Rencontres R 2024"
author: "Thomas Vroylandt, Kantiles"
format: 
  revealjs:
    theme: "assets/custom.scss"
    code-overflow: wrap
    df-print: paged
filters: [assets/bg_inverse.lua]
execute: 
  echo: true
  message: false
  warning: false
---

## Données et slides

[{{< fa paperclip >}} https://github.com/tvroylandt/rr_2024](https://github.com/tvroylandt/rr_2024)

![](img/qr_code_rr_excel.png)

## Qui suis-je ?

:::: {.columns}
::: {.column width="40%" .fragment .fade-in}

:::{.small-box-img}

![](img/thomas.jpeg){.round-img}
:::

**Thomas Vroylandt**

Associé (Kantiles)
[thomas@kantiles.com](mailto:thomas@kantiles.com)

[{{< iconify fa6-brands github >}}](https://github.com/tvroylandt)
[{{< iconify fa6-brands linkedin >}}](https://www.linkedin.com/in/thomas-vroylandt-9a2334190/)
[{{< fa link >}}](https://tvroylandt.github.io/personal/)
:::

::: {.column width="60%" .fragment .fade-in}

- Rapports statistiques
- Chaîne de production
- Politiques sociales et de l'emploi

{{< fa arrow-right >}} Cas réels, dans le cadre de production d'indicateurs pour un service statistique ministériel

:::
::::

# Notre sujet du jour

## Que demande le peuple ?

![](img/tidydata.jpeg){width="300"}

:::source
Source : Allison Horst [{{< fa paperclip >}}](https://openscapes.org/blog/2020-10-12-tidy-data/)
:::

## De l'autre côté du miroir

![](img/excel_meme.jpeg){width="300"}

## De l'autre côté du miroir

Une grande créativité dans les mises en forme !

:::r-stack
:::fragment
![](img/c24_0.png){width="700"}
:::
:::fragment
![](img/defm.png){width="750"}
:::
:::fragment
![](img/injep_vsc.png){width="775"}
:::
:::fragment
![](img/panorama_0.png){width="800"}
:::
:::fragment
![](img/insee_activite_0.png){width="850"}
:::
:::

## Boîte à outils {{< fa screwdriver-wrench >}}

:::incremental
- [`readxl`](https://readxl.tidyverse.org/) : import de fichiers rectangulaires simples

- [`tidyxl`](https://github.com/nacnudus/tidyxl/) : permet de transformer l'étape d'import en une étape de nettoyage de données

- [`unpivotr`](https://github.com/nacnudus/unpivotr/) : complément de `tidyxl` pour le nettoyage

- A mentionner : [`openxlsx2`](https://github.com/JanMarvin/openxlsx2) (sert aussi en écriture)
:::

:::fragment
```{r}
library(tidyverse)
library(readxl)
library(tidyxl)
library(unpivotr)
```
:::

# Cas pratiques

## Insee - Taux d'activité

Population active et taux d'activité au sens du recensement selon le sexe et l'âge en 2020 : comparaisons départementales [{{< fa paperclip >}}](https://www.insee.fr/fr/statistiques/2012710)

```{r}
path_insee_activite <- "data/TCRD_015.xlsx"
```

![](img/insee_activite_0.png){width="300"}

## Insee - Taux d'activité

Intitulés des colonnes fusionnées

![](img/insee_activite_1.png){width="300"}

## Insee - Taux d'activité

Zone des données décalée

![](img/insee_activite_2.png){width="300"}

## Insee - Taux d'activité - `readxl`

En spécifiant les colonnes à la main

```{r}
#| code-line-numbers: 1-3|4|5-16
#| output-location: slide
read_xlsx(
  path_insee_activite,
  sheet = "DEP",
  skip = 5,
  col_names = c(
    "code_dep",
    "lib_dep",
    "pop_active_tot",
    "pop_activite_h",
    "pop_active_f",
    "tx_act_15_64",
    "tx_act_25_54",
    "tx_act_h_15_64",
    "tx_act_h_25_54",
    "tx_act_f_15_64",
    "tx_act_f_25_54"
  )
)
```

## Insee - Taux d'activité - `tidyxl`

`xlsx_cells` donne un `tibble` de la localisation et du contenu des cellules

```{r}
#| output-location: fragment

xlsx_cells(path_insee_activite)
```

## Insee - Taux d'activité - `tidyxl` + `unpivotr`

![](img/insee_activite_tidy_1.png){height="300"}

```{r}
#| output: false

xlsx_cells(path_insee_activite) |>
  filter(sheet == "DEP" & row >= 3)
```

## Insee - Taux d'activité - `tidyxl` + `unpivotr`

![](img/insee_activite_tidy_2.png){height="300"}

```{r}
#| code-line-numbers: "3"
#| output: false

xlsx_cells(path_insee_activite) |>
  filter(sheet == "DEP" & row >= 3) |>
  behead("up-left", "typ_var")
```

{{< fa lightbulb >}} `up-left` car une cellule fusionnée ne remplit que le haut à gauche

## Insee - Taux d'activité - `tidyxl` + `unpivotr`

![](img/insee_activite_tidy_3.png){height="300"}

```{r}
#| code-line-numbers: "4"
#| output: false

xlsx_cells(path_insee_activite) |>
  filter(sheet == "DEP" & row >= 3) |>
  behead("up-left", "typ_var") |>
  behead("up", "mod_var")
```

## Insee - Taux d'activité - `tidyxl` + `unpivotr`

![](img/insee_activite_tidy_4.png){height="300"}

```{r}
#| code-line-numbers: "5"
#| output: false

xlsx_cells(path_insee_activite) |>
  filter(sheet == "DEP" & row >= 3) |>
  behead("up-left", "typ_var") |>
  behead("up", "mod_var") |>
  behead("left", "code_dep")
```

## Insee - Taux d'activité - `tidyxl` + `unpivotr`

![](img/insee_activite_tidy_5.png){height="300"}

```{r}
#| code-line-numbers: "6"
#| output: false

xlsx_cells(path_insee_activite) |>
  filter(sheet == "DEP" & row >= 3) |>
  behead("up-left", "typ_var") |>
  behead("up", "mod_var") |>
  behead("left", "code_dep") |>
  behead("left", "lib_dep")
```

## Insee - Taux d'activité - `tidyxl` + `unpivotr`

```{r}
#| output-location: fragment

xlsx_cells(path_insee_activite) |>
  filter(sheet == "DEP" & row >= 3) |>
  behead("up-left", "typ_var") |>
  behead("up", "mod_var") |>
  behead("left", "code_dep") |>
  behead("left", "lib_dep") |>
  select(typ_var, mod_var, code_dep, lib_dep, numeric)
```

## Drees - ISD C24

Répartition des naissances par âge de la mère [{{< fa paperclip >}}](https://data.drees.solidarites-sante.gouv.fr/explore/dataset/601_indicateurs-de-contexte/information/)

```{r}
path_c24 <- "data/C24-ISD_Part_accouchements_selon_age_mere.xlsx"
```

![](img/c24_0.png){width="300"}

## Drees - ISD C24

Début des données décalées

![](img/c24_1.png){width="300"}

## Drees - ISD C24

Intitulés des colonnes fusionnées

![](img/c24_2.png){width="300"}

## Drees - ISD C24

Un onglet par année (mais tous pareil) + un onglet de documentation

![](img/c24_3.png){width="300"}

## Drees - ISD C24

Des données à la fin que l'on ne souhaite pas importer

![](img/c24_4.png){width="300"}

## Drees - ISD C24 - `readxl`

On prend les colonnes telles quelles

```{r}
#| code-line-numbers: 1-3|5-6|7-9
#| output-location: fragment

read_xlsx(path_c24,
          sheet = "2022",
          skip = 5,
          .name_repair = "unique_quiet") |>
  rename(code_dep = ...1,
         lib_dep = ...2) |>
  pivot_longer(-c(code_dep, lib_dep),
               names_to = "age_mere",
               values_to = "perc_naiss")
```

## Drees - ISD C24 - `readxl`

Idem sur les onglets dans un `map`

```{r}
#| code-line-numbers: 1-2|3|4-7|8|9-17
#| output-location: slide
excel_sheets(path_c24) |>
  set_names() |>
  _[-12] |>
  map(read_xlsx,
      path = path_c24,
      skip = 5,
      .name_repair = "unique_quiet") |>
  list_rbind(names_to = "annee") |>
  rename(code_dep = ...1,
         lib_dep = ...2) |>
  pivot_longer(-c(annee, code_dep, lib_dep),
               names_to = "age_mere",
               values_to = "perc_naiss") |>
  mutate(annee = as.numeric(annee)) |>
  filter(!is.na(code_dep) &
           !is.na(perc_naiss) & 
           !code_dep %in% c("F", "M"))
```

## Drees - ISD C24 - `tidyxl`

```{r}
#| output-location: fragment

df_cells_c24 <- xlsx_cells(path_c24)

df_cells_c24
```

## Drees - ISD C24 - `tidyxl` + `dplyr`/`tidyr` 

```{r}
#| code-line-numbers: 1-4|5-6|7-8|9-10|12-14
#| output: false

df_cells_c24 |>
  filter(sheet != "Documentation") |>
  filter(row >= 4 & !is_blank & col != 2) |>
  select(sheet, row, col, character, numeric) |>
  mutate(header_row = case_when(row == 6 ~ character),
         code_dep = case_when(col == 1 ~ coalesce(as.character(numeric), character))) |>
  group_by(col) |>
  fill(header_row, .direction = "down") |>
  group_by(row) |>
  fill(code_dep, .direction = "down") |>
  ungroup() |>
  filter(!is.na(numeric) &
           !is.na(code_dep) &
           !is.na(header_row) & !code_dep %in% c("F", "M")) |>
  mutate(sheet = as.numeric(sheet),
         header_row = str_trim(header_row)) |>
  select(annee = sheet,
         code_dep,
         age_mere = header_row,
         perc_naiss = numeric)
```

## Drees - ISD C24 - `tidyxl` + `unpivotr` 

{{< fa circle-exclamation >}} penser à grouper par onglet

```{r}
#| code-line-numbers: 1-2|3|4-7|9-13
#| output-location: slide

df_cells_c24 |>
  filter(row >= 5) |>
  group_by(sheet) |>
  behead("up-left", "typ_var") |>
  behead("up", "mod_var") |>
  behead("left", "code_dep") |>
  behead("left", "lib_dep") |>
  ungroup() |>
  mutate(mod_var = str_trim(mod_var)) |>
  select(sheet, typ_var, mod_var, code_dep, lib_dep, numeric) |>
  filter(!is.na(code_dep) &
           !code_dep %in% c("F", "M") &
           !is.na(numeric)) 
```

## Astuces

::: {.incremental}
- on peut modifier le nombre de lignes à sauter par onglet (dans le `filter`), car les espacements ne sont pas toujours les mêmes d'une année sur l'autre
- utiliser les fonctions de `dplyr` et `tidyr` comme `fill` ou `coalesce` en complément
- on peut aussi appliquer à plusieurs fichiers Excel si les formats sont identiques
:::

## Astuces

- récupérer d'autres informations avec `str_detect`, comme la date de mise à jour

```{r}
#| code-line-numbers: "3"
#| output: false

df_cells_c24 |>
  select(sheet, character) |>
  filter(str_detect(character, "mise à jour")) |>
  mutate(
    date_maj = str_remove(character, "Date de mise à jour : "),
    date_maj = dmy(date_maj)
  )
```

## Résultat, avec Observable [{{< fa paperclip >}}](https://github.com/kantiles/demo_isd)

<iframe src="https://kantiles.github.io/demo_isd/main.html"  width="1200" height="800"></iframe>

## Drees - FAJ série

Fond d'aide aux jeunes [{{< fa paperclip >}}](https://data.drees.solidarites-sante.gouv.fr/explore/dataset/374_le-fond-d-aide-aux-jeunes-faj/information/)

![](img/faj_1.png){width="800"}

Et des espacements différents, à détecter

::: {layout-ncol=2}
![](img/faj_2.png){width="500"}

![](img/faj_3.png){width="500"}
:::

## Drees - FAJ série

```{r}
df_cells_faj <-
  xlsx_cells("data/FAJ Données annuelles 2007-2022.xlsx") |>
  filter(str_sub(sheet, 1, 6) == "FAJ 20" & sheet != "FAJ 2015")
```

:::fragment

Ligne de début - "Départements"

```{r}
#| code-line-numbers: "2"

df_cells_faj_min <- df_cells_faj |> 
  filter(character == "Départements") |> 
  select(sheet, row_min = row)
```

:::

:::fragment

Ligne de fin - ligne blanche vide

```{r}
#| code-line-numbers: 2|3|4|5-7|9

df_cells_faj_max <- df_cells_faj |> 
  filter(is_blank & col == 1) |> 
  inner_join(df_cells_faj_min, by = join_by(sheet)) |> 
  filter(row > row_min + 3) |> 
  group_by(sheet) |> 
  filter(row == min(row)) |>
  ungroup() |> 
  select(sheet, row_max = row) |>
  mutate(row_max = row_max - 1)
```

:::

## Drees - FAJ série

```{r}
#| code-line-numbers: 1-3|4|4|5-10
#| output-location: fragment

df_cells_faj |>
  inner_join(df_cells_faj_min, by = join_by(sheet)) |>
  inner_join(df_cells_faj_max, by = join_by(sheet)) |>
  filter(between(row, row_min, row_max)) |>
  group_by(sheet) |>
  behead("up-left", "typ_var") |>
  behead("up", "mod_var") |>
  behead("left", "code_dep") |>
  behead("left", "lib_dep") |>
  ungroup() |>
  select(sheet, typ_var, mod_var, code_dep, lib_dep, character, numeric)
```

## Drees - FAJ 2022

Deux tableaux dans le même onglet

![](img/faj_partition_1.png){width="300"}

```{r}
df_cells_faj_filtered <- df_cells_faj |>
  filter(sheet == "FAJ 2022" & row >= 9)
```

## Drees - FAJ 2022

Détection des débuts de tableaux

```{r}
df_title_cells_faj <- df_cells_faj_filtered |>
  filter(character %in% c("Départements", "Métropoles et départements hors métropoles"))
```

:::fragment
Partition ~ sorte de `nest`

```{r}
partitions_faj <- partition(df_cells_faj_filtered,
                            df_title_cells_faj)
```
:::

## Drees - FAJ 2022

Puis `map` (ou traitement séparé)

```{r}
#| code-line-numbers: 2|3-8|10|11
#| output: false

map(
  partitions_faj$cells,
  \(data) data |>
    behead("up-left", "typ_var") |>
    behead("up", "mod_var") |>
    behead("left", "code_dep") |>
    behead("left", "lib_dep") |>
    select(typ_var, mod_var, code_dep, lib_dep, character, numeric)
) |>
  set_names("dep", "metro") |>
  list_rbind(names_to = "type_geo")
```

## Drees - Panorama statistique

Etablissements pour personnes âgées, tableau 17 [{{< fa paperclip >}}](https://drees.solidarites-sante.gouv.fr/sites/default/files/panorama/telechargement.htm)

![](img/panorama_0.png){width="300"}

## Drees - Panorama statistique

:::: {.columns}
::: {.column width="40%"}

De l'information stockée sous une autre forme que le test :

- gras
- indentation
:::

::: {.column width="60%"}

![](img/panorama_1.png){width="600"}
:::
::::

## Drees - Panorama statistique

Chargement du contenu et du format de chaque cellule

```{r}
#| code-line-numbers: 1-4|6

path_panorama <- "data/PanoFrance2022.xlsx"

df_cells_panorama <- xlsx_cells(path_panorama) |> 
  filter(between(row, 330, 355))

format_panorama <- xlsx_formats(path_panorama)
```

## Drees - Panorama statistique

On utilise `unpivotr::behead_if`

```{r}
#| code-line-numbers: 2|3-5|6-9|10-13
#| output-location: slide

df_cells_panorama |>
  behead("up", "code_geo") |>
  behead_if(format_panorama$local$font$bold[local_format_id],
            direction = "left-up",
            name =  "type_etab") |>
  behead_if(
    format_panorama$local$alignment$indent[local_format_id] == 2,
    direction = "left-up",
    name =  "type_var"
  ) |>
  behead_if(
    format_panorama$local$alignment$indent[local_format_id] == 4,
    direction = "left",
    name =  "type_places"
  ) |>
  select(code_geo, type_etab, type_var, type_places, numeric, character) |>
  filter(!is.na(numeric))
```

# Conclusion

## Conclusion

::: {.incremental}
- L'import, avec `tidyxl` se résume souvent à de la manipulation de données

- Chaque fichier Excel est unique !

- Il faut rester pragmatique !
:::

# Quelles sont vos questions ?

